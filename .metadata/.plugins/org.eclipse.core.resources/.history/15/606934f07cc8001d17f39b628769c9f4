package com.springexample.realowrldSpringProject;

@RestController
@AllArgsConstructor
public class UserApi {
	  private UserRepository userRepository;
	  private UserQueryService userQueryService;
	  private PasswordEncoder passwordEncoder;
	  private JwtService jwtService;
	  private UserService userService;

	  @RequestMapping(path = "/users", method = POST)
	  public ResponseEntity createUser(@Valid @RequestBody RegisterParam registerParam) {
	    User user = userService.createUser(registerParam);
	    UserData userData = userQueryService.findById(user.getId()).get();
	    return ResponseEntity.status(201)
	        .body(userResponse(new UserWithToken(userData, jwtService.toToken(user))));
	  }

	  @RequestMapping(path = "/users/login", method = POST)
	  public ResponseEntity userLogin(@Valid @RequestBody LoginParam loginParam) {
	    Optional<User> optional = userRepository.findByEmail(loginParam.getEmail());
	    if (optional.isPresent()
	        && passwordEncoder.matches(loginParam.getPassword(), optional.get().getPassword())) {
	      UserData userData = userQueryService.findById(optional.get().getId()).get();
	      return ResponseEntity.ok(
	          userResponse(new UserWithToken(userData, jwtService.toToken(optional.get()))));
	    } else {
	      throw new InvalidAuthenticationException();
	    }
	  }

	  private Map<String, Object> userResponse(UserWithToken userWithToken) {
	    return new HashMap<String, Object>() {
	      {
	        put("user", userWithToken);
	      }
	    };
	  }
	}

	@Getter
	@JsonRootName("user")
	@NoArgsConstructor
	class LoginParam {
	  @NotBlank(message = "can't be empty")
	  @Email(message = "should be an email")
	  private String email;

	  @NotBlank(message = "can't be empty")
	  private String password;
	}

